#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* Helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
#+END_SRC

* ido Mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

* style
#+BEGIN_SRC emacs-lisp
(load-theme 'alect-black-alt t)
(set-face-attribute 'default nil :height 200)
(setq-default indent-tabs-mode nil)
#+END_SRC
* neotree
#+BEGIN_SRC emacs-lisp
(require 'neotree)
(setq neo-smart-open t)
(global-set-key (kbd "C-x C-n") 'neotree-toggle)
(global-set-key (kbd "C-c d") 'neotree-dir)
(global-set-key (kbd "C-c e") (lambda() (interactive) (neotree-dir "~/embark/embark2/")))
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+END_SRC

* personal hotkeys
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-n" '(lambda () (interactive) (forward-line 9)))
(global-set-key "\M-p" '(lambda () (interactive) (previous-line 9)))
#+END_SRC

* autocomplete?
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
:ensure t
:init
(progn
(ac-config-default)
  (global-auto-complete-mode t)
 ))
#+END_SRC

* style
#+BEGIN_SRC emacs-lisp
(load-theme 'alect-black-alt t)
(set-face-attribute 'default nil :height 180)

(setq column-number-mode t)
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(require 'magit-gitflow)
(add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
(use-package forge
  :after magit)
#+END_SRC
* javascript
#+BEGIN_SRC emacs-lisp
(setq js-indent-level 2)
#+END_SRC
* path variable setting
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC
* ask before kill
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
* rainbow del
#+BEGIN_SRC emacs-lisp
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
* Flycheck
(add-hook 'js2-mode-hook
          (defun my-js2-mode-setup ()
            (flycheck-mode t)
            (when (executable-find "eslint")
              (flycheck-select-checker 'javascript-eslint))))
(require 'flycheck)

#+BEGIN_SRC emacs-lisp
;; turn on flychecking globally
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))

(add-hook 'after-init-hook #'global-flycheck-mode)

;; disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-eslint)))
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(html-tidy)))

(flycheck-add-mode 'typescript-tslint 'ts-mode)

#+END_SRC
* diff-hl
#+BEGIN_SRC emacs-lisp
(global-diff-hl-mode)
#+END_SRC
* all the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
:ensure t
:defer 0.5)
#+END_SRC

* aggressive indent (et al)
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
:ensure t
:config
(global-aggressive-indent-mode 1)
;;(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(use-package yasnippet
:ensure t
:init
(yas-global-mode 1))


;; is this necessary
(use-package yasnippet-snippets)

(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)

;; this probably shouldn't be global
(global-set-key (kbd "C-x i") 'import-js-import)
#+END_SRC
EOF
